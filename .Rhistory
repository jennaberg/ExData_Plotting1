w<-sapply(state.data[,3], function(x) x==m)
possible.hospitals<-state.data[w,]
#finally i'll organize these alphabetically
ordered.safe.hospitals<-sort(possible.hospitals[,1])
#and return the top one
#ordered.safe.hospitals[1]
}
x<-best("TX", "heart attack")
x
x<-best("TX", "heart failure")
x
#this is the function that will return the best hospital for a condition in a state
best<-function(state, outcome){
#first i will check to if the inputs are valid
check.state<-function(state){
if(is.na(match(state, state.abb))) stop("invlaid state")
}
check.outcome<-function(outcome){
x<-c("heart attack", "heart failure", "pneumonia")
if(is.na(match(outcome, x))) stop("invalid outcome")
}
check.state(state)
check.outcome(outcome)
#i want to start by pulling only the data i need
if(outcome=="heart attack") y<-c(2, 7, 11)
if(outcome=="heart failure") y<-c(2, 7, 17)
if(outcome=="pneumonia") y<-c(2, 7, 23)
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")[,y]
#first i want to only look at the data´ from my state and for my outcome
state.data<-subset(data, State==state)
#since the bad data is of fomrm Not Available instead of NA i will have to
#subset those out myself
#z<-sapply(state.data[,3], function(x) x=="Not Available")
#clean.data<-state.data[!z,]
#next i will find the minimum of the death rates
#m<-sort(state.data[,3])[1]
#now i'll reduce the data set again to find those that have the minimum rate
#w<-sapply(state.data[,3], function(x) x==m)
#possible.hospitals<-state.data[w,]
#finally i'll organize these alphabetically
#ordered.safe.hospitals<-sort(possible.hospitals[,1])
#and return the top one
#ordered.safe.hospitals[1]
}
x<-best("TX", "heart failure")
x
sort(x)
sort(x[,3])
sort(x[,3])[1]
#this is the function that will return the best hospital for a condition in a state
best<-function(state, outcome){
#first i will check to if the inputs are valid
check.state<-function(state){
if(is.na(match(state, state.abb))) stop("invlaid state")
}
check.outcome<-function(outcome){
x<-c("heart attack", "heart failure", "pneumonia")
if(is.na(match(outcome, x))) stop("invalid outcome")
}
check.state(state)
check.outcome(outcome)
#i want to start by pulling only the data i need
if(outcome=="heart attack") y<-c(2, 7, 11)
if(outcome=="heart failure") y<-c(2, 7, 17)
if(outcome=="pneumonia") y<-c(2, 7, 23)
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")[,y]
#first i want to only look at the data´ from my state and for my outcome
state.data<-subset(data, State==state)
#since the bad data is of fomrm Not Available instead of NA i will have to
#subset those out myself
#z<-sapply(state.data[,3], function(x) x=="Not Available")
#clean.data<-state.data[!z,]
#next i will find the minimum of the death rates
m<-sort(state.data[,3])[1]
#now i'll reduce the data set again to find those that have the minimum rate
w<-sapply(state.data[,3], function(x) x==m)
#possible.hospitals<-state.data[w,]
#finally i'll organize these alphabetically
#ordered.safe.hospitals<-sort(possible.hospitals[,1])
#and return the top one
#ordered.safe.hospitals[1]
}
x<-best("TX", "heart failure")
x
#this is the function that will return the best hospital for a condition in a state
best<-function(state, outcome){
#first i will check to if the inputs are valid
check.state<-function(state){
if(is.na(match(state, state.abb))) stop("invlaid state")
}
check.outcome<-function(outcome){
x<-c("heart attack", "heart failure", "pneumonia")
if(is.na(match(outcome, x))) stop("invalid outcome")
}
check.state(state)
check.outcome(outcome)
#i want to start by pulling only the data i need
if(outcome=="heart attack") y<-c(2, 7, 11)
if(outcome=="heart failure") y<-c(2, 7, 17)
if(outcome=="pneumonia") y<-c(2, 7, 23)
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")[,y]
#first i want to only look at the data´ from my state and for my outcome
state.data<-subset(data, State==state)
#since the bad data is of fomrm Not Available instead of NA i will have to
#subset those out myself
#z<-sapply(state.data[,3], function(x) x=="Not Available")
#clean.data<-state.data[!z,]
#next i will find the minimum of the death rates
m<-sort(state.data[,3])[1]
#now i'll reduce the data set again to find those that have the minimum rate
w<-sapply(state.data[,3], function(x) x==m)
possible.hospitals<-state.data[w,]
#finally i'll organize these alphabetically
#ordered.safe.hospitals<-sort(possible.hospitals[,1])
#and return the top one
#ordered.safe.hospitals[1]
}
x<-best("TX", "heart failure")
x
x<-best("MD", "heart attack")
x
x<-best("MD", "pneumonia")
x
#this is the function that will return the best hospital for a condition in a state
best<-function(state, outcome){
#first i will check to if the inputs are valid
check.state<-function(state){
if(is.na(match(state, state.abb))) stop("invlaid state")
}
check.outcome<-function(outcome){
x<-c("heart attack", "heart failure", "pneumonia")
if(is.na(match(outcome, x))) stop("invalid outcome")
}
check.state(state)
check.outcome(outcome)
#i want to start by pulling only the data i need
if(outcome=="heart attack") y<-c(2, 7, 11, 15)
if(outcome=="heart failure") y<-c(2, 7, 17, 21)
if(outcome=="pneumonia") y<-c(2, 7, 23, 27)
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv")[,y]
#first i want to only look at the data´ from my state and for my outcome
state.data<-subset(data, State==state)
#since the bad data is of fomrm Not Available instead of NA i will have to
#subset those out myself
#z<-sapply(state.data[,3], function(x) x=="Not Available")
#clean.data<-state.data[!z,]
#next i will find the minimum of the death rates
m<-sort(state.data[,3])[1]
#now i'll reduce the data set again to find those that have the minimum rate
w<-sapply(state.data[,3], function(x) x==m)
possible.hospitals<-state.data[w,]
#finally i'll organize these alphabetically
ordered.safe.hospitals<-sort(possible.hospitals[,1])
#and return the top one
ordered.safe.hospitals[1]
}
x<-best("MD", "pneumonia")
x
source("submitscript3.r")
source("submitscript3.R")
submit()
2
submit()
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv("path2csv", stringsAsFactors=FALSE)
mydf<-read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_dp, package, country)
select(cran, ip_id, package, country)
fileUrl<-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="restaurants.csv", method="curl")
resData<-read.csv("restaurant.csv")
resData<-read.csv("restaurants.csv")
restData$nearMe<=restData$neighborhood %in% c("Rolland Park", "Homeland")
restData$nearMe<=resData$neighborhood %in% c("Rolland Park", "Homeland")
restData$nearMe<-resData$neighborhood %in% c("Rolland Park", "Homeland")
restData$nearMe=resData$neighborhood %in% c("Rolland Park", "Homeland")
nearMe<-resData$neighborhood %in% c("Rolland Park", "Homeland")
table(nearMe)
resData$nearMe=resData$neighborhood %in% c("Rolland Park", "Homeland")
table(resData$nearMe)
resData$zipWrong=ifelse(resData$zipCode<0, TRUE, FALSE)
table(resData$zipWrong)
table(resData$zipWrong, resData$zipcode<0)
table(resData$zipWrong, resData$zipCode<0)
resData$zipGroups=cut(resData$zipCode, breaks=quantile(resData$zipCode))
table(resData$zipGroups)
table(resData$zipGroups, resData$zipCodes)
table(resData$zipGroups, resData$zipCode)
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, dest.file="house.csv", method="curl")
download.file(fileUrl, destfile="house.csv", method="curl")
house<-read.csv("house.csv")
relevant<-select(house, ACR, AGS)
libarary(dplyr)
library(dplyr)
relevant<-select(house, ACR, AGS)
relevant<-mutate(relevant, check=(!is.na(relevant$ACR) & !is.na(relevant$AGS)))
head(relevant)
relevant<-mutate(relevant, agr.log=(relevant$ACR==3 & relevant$AGS==6))
head(relevant)
sum(relevant$arg.log, na.rm=TRUE)
relevant<-select(house, ACR, AGS)
ordered<-arrange(relevant, desc(ACR), desc(AGS))
head(ordered)
head(ordered n=79)
head(ordered, n=79)
relevant<-mutate(relevant, argLog=((relevant$ACR==3) & (relevant$AGS==6)))
sum(relevant$argLog, na.rm=TRUE)
argLog<-relevant$argLog
class(argLog)
which(argLog)
download.packages(jpeg)
library(jpeg)
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile="picture.jpg", mehtod="curl")
download.file(fileUrl, destfile="picture.jpg", method="curl")
jpeg(picture.jpg)
jpeg("picture.jpg")
quantile(jpeg("picture.jpg"), prob=c(0,0.3, 0.8), native=TRUE)
download.packages("jpeg")
source("jpeg")
library("jpeg")
install.packages("jpeg")
library(jpeg)
picture<-readJPEG("picture.jpg")
quantile(picture, probs=c(0, 0.3, 0.8))
quantile(picture, probs=c(0, 0.3, 0.8), native=TRUE)
picture<-readJPEG("picture.jpg", native=TRUE)
quantile(picture, probs=c(0, 0.3, 0.8))
fileUrl1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv "
fileUrl2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile="GDP.csv", method="curl")
download.file(fileUrl2, destfile="Ed.csv", method="curl")
gdp<-read.csv("GDP.csv")
sd<-read.csv("Ed.csv")
ed<-read.csv("Ed.csv")
head(gdp)
head(ed)
str(gdp)
str(ed)
names(gdp)
names(Ed)
names(ed)
merge(gdp, ed, by.x="X", by.y="CountryCode")
df<-merge(gdp, ed, by.x="X", by.y="CountryCode")
head(df)
arrange(df, desc(GDP))
head(gdp)
gdp[5,2]
gdp[5,3]
gdp[6,2]
named(gsp)
named(gdp)
names(gdp)
arrange(df, desc("Gross.domestic.product.2012"))
arrange(df, desc(Gross.domestic.product.2012))
df<-arrange(df, desc(Gross.domestic.product.2012))
head(df, n=18)
head(gdp)
head(gdp, n=20)
gdp<-read.csv("GDP.csv", skip=4)
head(gdp)
head(ed)
merge(GDP, ed, by.x=X, by.y=CountryCode)
merge(gdp, ed, by.x=X, by.y=CountryCode)
merge(gdp, ed, by.x="X", by.y=CountryCode)
merge(gdp, ed, by.x="X", by.y="CountryCode")
df<-merge(gdp, ed, by.x="X", by.y="CountryCode")
head(df)
df<-arrange(df, "Gross.domestic.product.2012")
df<-arrange(df, Gross.domestic.product.2012)
df<-arrange(df, X.1)
head(df)
head(df, n=20)
head(df, n=60)
df<-arrange(df, desc(X.1))
head(df)
tail(df)
gdp
gdp<-read.csv("GDP.csv")
ed<-read.csv("Ed.csv")
str(gdp)
str(ed)
df<-merge(gdp, ed, by.x="X", by.y="CountryCode")
str(df)
head(df)
arrange(df, dessc("Gross.domestic.product.2012"))
arrange(df, desc("Gross.domestic.product.2012"))
arrange(df, desc(Gross.domestic.product.2012))
head(df)
ordered<-arrange(df, desc(Gross.domestic.product.2012))
head(ordered)
head(ordered, n=30)
tail(ordered, n=40)
tail(ordered, n=40)
class(ordered$Gross.domestic.product.2012)
fix<-mutate(df, Gross.domestic.product.2012=as.numeric(Gross.domestic.product.2012))
class(fix$Gross.domestic.product.2012)
ordered<-arrange(df, desc(Gross.domestic.product.2012))
head(ordered, n=3)
tail(ordered, n=53)
head(ordered, n=13)
head(ordered, n=14)
head(ordered, n=14)
dim(gdp)
dim(ed)
relevant.gdp<-select(gdp, X, Gross.domestic.product.2012)
relevant.gdp
clean.gdp<-relevant.gdp$!is.na(X)
clean.gdp<-filter(relvant.gdp$Gross.domestic.product.2012==1:190)
clean.gdp<-filter(relevant.gdp$Gross.domestic.product.2012==1:190)
clean.gdp<-filter(relevant.gdp, relevant.gdp$Gross.domestic.product.2012==1:190)
dim(gdp)
dim(ed)
merge(gdp, ed, by.x=X, by.y=Gross.domestic.product.2012)
merge(gdp, ed, by.x="X", by.y="CountryCode")
df<-merge(gdp, ed, by.x="X", by.y="CountryCode")
dim(df)
ordered<-arrange(df, desc("Gross.domestic.product.2012"))
ordered<-arrange(df, desc(Gross.domestic.product.2012))
numeric.df<-mutate(df, Gross.domestic.product.2012=as.numeric(Gross.domestic.product.2012))
ordered<-arrange(numeric.df, desc(Gross.domestic.product.2012))
head(ordered, n=14)
dim(df)
head(gdp)
gdp<-read.csv("GDP.csv", skip=4)
gdp<-read.csv("GDP.csv", skip=4, nrows=190)
tail(gdp)
gdp<-read.csv("GDP.csv", skip=4, nrows=200)
tail(gdp)
gdp<-read.csv("GDP.csv", skip=4, nrows=150)
tail(gdp)
gdp<-read.csv("GDP.csv", skip=4, nrows=196)
tail(gdp)
gdp<-read.csv("GDP.csv", skip=4, nrows=190)
df<-merge(gdp, ed, by.x="X", by.y="CountryCode")
dim(df)
cleass(df$X.2)
class(df$X.2)
heaf(df)
head(df)
class(df$Gross.domestic.product.2012)
class(df$"Gross.domestic.product.2012")
class(df$X.1)
ordered<-arrange(df, desc(X.1))
head(df, n=14)
head(ordered, n=14)
names(df)
sumarize(df, mean, na.rm=TRUE)
summarize(df, mean, na.rm=TRUE)
summarize(df)
gdp
head(gdp)
gdp<-read.csv("GDP.csv", nrows=195)
head(gdp)
head(ed)
levels(ed$Income.Levels)
levels(ed$Income.Group)
first<-filter(df, Income.Group=="High income: OECD")
second<-filter(df, Income.Group=="High income: nonOECD")
mean(first$X.1)
mean(second$X.1)
gdp.data<-dcast(df X.1Income.Group, mean)
gdp.data<-dcast(df X.1~Income.Group, mean)
gdp.data<-dcast(df, X.1~Income.Group, mean)
library(reshape2)
install.packages("reshape2")
librayr(reshape2)
library(reshape2)
gdp.data<-dcast(df, X.1~Income.Group, mean)
gdp.data
gdp.data<-dcast(df, Income.Group~X.1, mean)
gdp.data
splitGDP=split(df$X.1, df$Income.Group)
splitGDP
lapply(splitGDP, mean)
table(quantile(df$X.1, probs=c(0,0.2, 0.4, 0.6, 0. 8)), df$Income.Group)
table(quantile(df$X.1, probs=c(0,0.2, 0.4, 0.6, 0. 8), na.rm=TRUE), df$Income.Group)
quantile(df$X.1, probs=c(0, 0.2, 0.4, 0.6, 0.8), na.rm=TRUE)
table(df$X.1, df$Income.Group)
quantile(df$X.1, probs=c(0, 0.2, 0.4, 0.6, 0.8), na.rm=TRUE)
cut(df, breaks=c(1, 38.6, 76.2, 113,8, 152.4))
quantile(df$X.1, probs=c(0, 0.2, 0.4, 0.6, 0.8), na.rm=TRUE)
levels(df$Income.Group)
q5<-filter(df, X.1>=152.4, Income.Group=="Lower middle income")
q5<-filter(df, X.1>=152.4, Income.Group=="Lower middle income")
names(df)
q5<-filter(df, X.1>=152.4, "Income.Group"==Lower middle income)
q5<-filter(df, X.1>=152.4, Income.Group=="Lower middle income")
q5<-filter(df, X.1>=152.4)
filter(df, "X.1">=152.4)
filter(df, "X.1">=152.4, "IncomeGroup"=Lower middle income)
filter(df, "X.1">=152.4, "IncomeGroup"="Lower middle income")
filter(df, "X.1">=152.4, "IncomeGroup"=="Lower middle income")
library(dplyr)
filter(df, X.1>=152.4, Income.Group=="Lower middle income")
quantile(df$X.1, probs=c(0, 0.2, 0.4, 0.6, 0.8), na.rm=TRUE)
filter(df, X.1>=153, Income.Group=="Lower middle income")
filter(df, X.1>=152, Income.Group=="Lower middle income")
filter(df, X.1>38, Income.Group=="Lower middle income")
quantile(df$X.1, probs=c(0.8))
filter(df, X.1>=152.4, Income.Group="Lower middle income")
filter(df, X.1>=152.4, Income.Group=="Lower middle income")
quantile(df$X.1, prob=c(0.2))
filter(df, X.1<=38, Income.Group=="Lower middle income")
ls()
View(cran)
cran$time
head(cran$time)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", dest.file="comm.csv", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="comm.csv", method="curl")
df<-read.csv("comm.csv")
summary(df)
names<-df[1,]
sumamry(names)
summary(names)
View(names)
names<-colnames(df)
class(names)
strsplit(names, "wgtp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="gdp.csv", method="curl")
df<-read.csv("gdp.csv")
summary(df)
View(df)
df<-read.csv("gdp.csv", skip=4)
View(df)
gdp<-df[,5]
class(gdp)
n.gdp<-as.numeric(gdp)
View(n.gdp)
View(gdp)
df2<-read.table("gdp.csv", skip=4, strings.as.factors=F)
df2<-read.table("gdp.csv", skip=4, stringsAsFactors=F)
df2<-read.table("gdp.csv", stringsAsFactors=F)
df2<-read.table("gdp.csv",  skip=3 , stringsAsFactors=F)
df2<-read.table("gdp.csv",  skip=2 , stringsAsFactors=F)
View(df)
View(gdP)
View(gdp)
strsplit(gdp, ',')
strsplit(gdp, '\\,')
sub(",", "", gdp)
gsub(",", "", gdp)
n.gdp<-gsub(",", "", gdp)
class(n.gdp)
numb.gdp<-as.numeric(n.gdp)
View(n.gdp)
View(nump.gdp)
View(numb.gdp)
mean(numb.gdp, na.rm=TRUE)
View(df)
gdp<-as.numeric(gsub("," , "", df[,5]))
mean(gdp, na.rm=TRUE)
gdp2<-gdp[1:190]
mean(gdp)
mean(gdp, na.rm=TRUE)
View(gdp)
View(gdp2)
class(gdp)
sum(gdp, na.rm=TRUE)
sum(gdp, na.rm=TRUE)/190
sum(gdp, na.rm=TRUE)/204
mean(gdp2)
grep("*United",countryNames)
grep("*United",df$countryNames)
grep("^United",df$countryNames)
View(df)
grep("^United",df[,4])
grep("*United",df[,4])
names<-df[, 4]
View(names)
grep("*United, names")
grep("*United", names)
table(grep("*United", names))
names.2<-names[1:190]
table(grep("*United", names.2))
table(grep("^United", names.2))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="gdp.csv", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="ed.csv", method="curl")
df1<-read.csv("gdp.csv")
df2<-read.csv("ed.csv")
View(df1)
View(df2)
df3<-merge(df1, df2, by.x="X", by.y="CountryCode")
View(df3)
grep("Fiscal year end: June", df3$Special.Notes)
table(grep("Fiscal year end: June", df3$Special.Notes))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(sampleTimes)
Table(grep("2012", sampleTimes))
table(grep("2012", sampleTimes))
L1<-grep("2012", sampleTimes)
sum(L1)
